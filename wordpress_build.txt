1. Choose a distro - ubuntu 24.04.1 LTS in this case
    -If you are using cloud hosting a shared CPU plan w/ 1CPU - 1GB RAM and 25GB
    instance is enough.


2. After creating your VM using the IP Address ssh into the server.

    Set the hostname of the server
        $ sudo nano /etc/hostname
            wordpress

    In the text file give server a name use the domain name if you have one 
    otherwise just give it an appropriate name.
    You will also need to edit the /etc/hosts file as well.

        $ sudo nano /etc/hosts
            127.0.1.1 wordpress


3. For secrity reasons it is a best practice to manage your server with a 
regular user account and not as root.
    $ adduser murphy
        -Follow prompts to add a new user

    Give your user sudo privildges
        $ usermod -aG sudo murphy


4. Update the server with the latests updates.Note that 'apt upgrade', 
upgrades packages that are already installed and will not remove any packages
on the system. 
'apt dist-upgrade' will fully upgrade the system to the 
latest versions in the repos including the kernel.
  
  Since this is a new install we will do a full upgrade.
    $ sudo apt update && sudo apt dist-upgrade


5. Reboot the server to make sure all the changes we have made will be applied
    $ reboot

If you haven't switch to the non root user now is a good time to do so.


6. Install the webserver
    $ sudo apt install apache2
    
    To check the status of the apache server use the systemd utility.
        $ systemctl status apache2

You will notice that there is an enabled fieled in the output. This is important
because it means that the apache will automatically restart if the VM is 
rebooted.
To check if the server can be accessed from the internet use a web browser to 
navigate to the public IP address of the server. The apache2 default page 
should be visible. The server is using http not https so you will likely get a 
warning from the browser when connecting to the server Ignore this for now.


7. WordPress needs a database in order to function. We will be using mariadb 
which is a fork of mysql.

    Installing mariadb
        $ sudo apt install mariadb-server


    Configuring mariadb
        log into the database with sudo
            $ sudo mariadb


    At the mariadb prompt
        MariaDB[[none]]> SHOW DATABASES;
        The above command will show a list of databases on the system. At this 
        point we have not set up any databases but there are default databases 
        on the system.


    Creating the actual database that will be use by WordPress
        MariaDB[[none]]> CREATE DATABASE wordpress_db DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
        
        A database called wordpress_db should now be created. To check run the 
        SHOW DATABASES; command again. 
        
    We now need to create a user for wordpress that will manipulate the database.

        MariaDB[[none]]> GRANT ALL PRIVILEGES ON wordpress_db.* TO wordpress_user@localhost IDENTIFIED BY 'create_a_password';


    Update the priviligies we just granted.
        MariaDB[[none]]> FLUSH PRIVILEGES;

    Now exit the database.
        MariaDB[[none]]> EXIT;


8. Now add the default security policies to the database.
    $ sudo mysql_secure_installation

    **Answer the series of questions**
    - Enter current password for root?
    skipp for now by pressing enter.

    - Switch to unix_socket authentication? n

    - Change the root password? Y
    this will allow you to set a password for the database root user.

    - Remove anonymous users? Y

    - Disallow root to login remotely? Y

    - Remove test database and access to it? Y

    - Reload privilege tables now" Y



9. Downloading and configuring WordPress
    $ wget https://wordpress.org/latest.zip

    Since the download is in a zip format we will need to uzip it.
        $ sudo apt install unzip


    unzip the latest.zip file
        $ unzip latest.zip


a wordpress directory will be extracted and you can now delete the latest.zip 
file. The wordpress directory is owned by the logged-in user. This needs to 
changed to the wordpress user that will be serving wordpress.

    $ sudo chown -R www-data:www-data wordpress
    Note that the ownership change must include all the files and directories 
    so we will use the recurrisive option with uppercase 'R'


    We now need to move the wordpress directory so it can be serverd by the 
    webserver.
        $ sudo mv wordpress /var/www/


10. We now need to create a config file that will instruct apache on how it 
should server wordpress.
NOTE THAT COPYING AND PASTING INTO THE COMMANDLINE WINDOW CAN SOMETIME RESULT 
IN ERROR READING THE FILE, HAND TYPE THE FILE OR UPLOAD A COPY.

    $ sudo nano /etc/apache2/sites-available/wordpress.conf
        
        Add the following to the wordpress.conf file save and exit
        -to save in the nano editor use CTRL + O 
        -to exit use CTRL + X

            <VirtualHost *:80>
                DocumentRoot /var/www/wordpress
                <Directory /var/www/wordpress>
                    Options FollowSymLinks
                    AllowOverride Limit Options FileInfo
                    DirectoryIndex index.php
                    Require all granted
                </Directory>
                <Directory /var/www/wordpress/wp-content>
                    Options FollowSymLinks
                    Require all granted
                </Directory>
            </VirtualHost>



We now need to enable the config file we just created. You will be asked to 
restart/reload apache for the changes to take effect however do not 
restart/reload at this point wait to do one restart at the end of all your 
changes instead to save time.
    
    $ sudo a2ensite wordpress.conf

Now remove the default config file that came with the system
    $ sudo a2dissite 000-default.conf



11. There are several packages that wordpress will need to work so we will 
install those now.
    $ sudo apt install libapache2-mod-php php-curl php-gd php-intl php-mbstring php-mysql php-soap php-xml php-xmlrpc php-zip


    Enable rewrite module
        $ sudo a2enmod rewrite


    Now restart apache
        sudo systemctl restart apache2


    Check that it is active.
        $ systemctl status apache2
    
Note that a2enmod with no arguments will list all the packages instaled on the 
system.


12. Log-in to wordpress admin panel with the appropreate credentials
    NOTE: The login form can be filled out on the server directly if you are 
    having issues with the GUI.

    If this is your first time logging in to the wordpress admin
    locate the wp-config-sample.php file in the /var/www/wordpress directory
    edit the:
        database name
        user name
        database password 
        database host (should be localhost)
        table prefix (should be wp_)

    save the file as wp_config.php

    Confirming your database credentials:
        database name
            MariaDB[[none]]> SHOW DATABASES;

        database user and associated host
            MariaDB[[none]]> SELECT User, Host FROM mysql.user;
        
        If you do not have access to your password you will need to reset it
            MariaDB[[none]]> ALTER USER 'username'@'host' IDENTIFIED BY 'new_password';


13. Secure the connection to the webserver using 'Lets Encrypt'.
first step is to install core snap package
    $ sudo snap install core; sudo snap refresh core
    after the download and installation is complete move on to the next step

Install certbot
    $ sudo snap install --clasic certbot

Now create a symbolic link for certbot
    sudo ln -s /snap/bin/certbot /user/bin/certbot

To move on to the next step you must ensure that you have a valid domain and 
that the DNS server is pointing to your server ie the A record at you registar 
must have the correct IP address to your server.

    $ sudo certbot --apache
    follow the prompts to complete